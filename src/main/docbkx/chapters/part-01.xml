<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<part xmlns:xi="http://www.w3.org/2001/XInclude" id="01.daily">
	<title>Penggunaan Git Sehari-hari</title>

	<chapter id="01.01.intro">
	    <title>Pendahuluan</title>

	    <section id="01.01.01.tentang.version-control">
		    <title>Tentang Version Control</title>
		    <para>
			    Version Control adalah sebuah aplikasi yang mampu mengelola perubahan terhadap file.
			    Dia mencatat perubahan apa saja yang terjadi, kapan terjadi, siapa yang mengubah, dan apa isi perubahannya.
			    Dengan menggunakan version control, file dapat dikerjakan secara bersamaan oleh lebih dari satu orang dengan aman.
			    Ini merupakan fitur yang esensial dalam kegiatan pembangunan aplikasi perangkat lunak atau pemrograman.
		    </para>
		    <para>
			    Ada dua jenis version control, terpusat (centralized) dan terdistribusi (distributed).
			    Version control terpusat memiliki satu database (atau dikenal dengan istilah repository) yang digunakan oleh banyak orang.
			    Salah satu aplikasi version control terpusat yang terkenal adalah <ulink url="http://subversion.tigris.org">Subversion</ulink>.
		    </para>
		    <para>
			    Version control terdistribusi memiliki satu repository untuk masing-masing pengguna.
			    Repository ini berdiri sendiri, tapi bisa disinkronisasikan antar pengguna dengan berbagai metode.
			    Aplikasi version control terdistribusi yang terkenal antara lain
			    adalah <ulink url="http://git-scm.org">Git</ulink> dan <ulink url="http://mercurial.selenic.com">Mercurial</ulink>.
		    </para>
	    </section>

	    <section id="01.01.02.tentang.git">
		    <title>Tentang Git</title>
		    <para>
			    Git diciptakan oleh Linus Torvalds. Ya, Anda benar, Linus Torvalds <emphasis>yang itu</emphasis>. Si pembuat Linux.
		    </para>
		    <para>
			    Alkisah pada jaman dahulu kala, Linus tidak menggunakan version control sama sekali.
			    Dia menerima kontribusi kode program dalam bentuk email. Email berisi potongan kode (patch) ini
			    lalu diintegrasikannya ke kode programnya sendiri.
			    Begitu seterusnya sehingga sistem operasi Linux memiliki banyak fitur yang sebagian besarnya adalah sumbangan orang lain.
		    </para>
		    <para>
			    Seiring dengan makin bertambahnya kontributor Linux, Linus pun merasa kewalahan dalam memproses email yang masuk.
			    Ini mengakibatkan perkembangan sistem operasi Linux menjadi lambat, dibatasi oleh kecepatan Linus membuka emailnya.
			    Pada saat yang genting ini, datanglah Larry McVoy menawarkan dagangannya,
			    yaitu <ulink url="http://en.wikipedia.org/wiki/BitKeeper">BitKeeper</ulink>.
		    </para>
		    <para>
			    Rupanya BitKeeper ini sesuai dengan cara kerja Linus, sehingga diapun dengan gembira memakainya.
			    Apalagi dengan diiming-imingi fasilitas gratis iuran tahunan, tidak kalah dengan penawaran kartu kredit di mal.
			    Dengan segera, BitKeeper menjadi version control resmi dalam kegiatan pengembangan Linux.
		    </para>
		    <para>
			    Walaupun demikian, kemesraan ini tidak berlangsung lama.
			    Andrew Tridgell, salah satu kontributor Linux dan pembuat aplikasi Samba,
			    mencoba mendownload isi repository BitKeeper.
			    Hal ini membuat Larry McVoy marah dan menghentikan fasilitas gratis iuran tahunan penggunaan BitKeeper.
			    Bahkan beberapa kontributor, khususnya yang berstatus karyawan OSDL, tidak diperbolehkan membeli lisensinya.
			    Jangankan gratis, bayar saja tidak boleh.
		    </para>
		    <para>
			    Menghadapi kondisi ini, akhirnya Linus Torvalds memutuskan untuk membuat sendiri aplikasi version control. Hasilnya adalah Git.
		    </para>
	    </section>

	    <section id="01.01.03.tentang.buku">
		    <title>Tentang Buku Git</title>

		    <section id="01.01.03.01.tentang.buku.tujuan">
			    <title>Mengapa buku ini ditulis</title>
			    <para>
				    Penggunaan version control adalah langkah pertama menuju software engineering yang baik dan benar.
				    Sebuah tim yang membuat aplikasi perangkat lunak tidak akan bisa bekerja sama dengan lancar tanpa version control.
				    Sayangnya, referensi yang membahas version control dalam bahasa Indonesia masih sangat minim.
				    Dengan adanya buku ini, mudah-mudahan bisa meningkatkan efektifitas para programmer Indonesia
				    sehingga bisa berdiri setara dengan koleganya di dunia internasional.
		        </para>
		    </section>

		    <section id="01.01.03.02.tentang.buku.pembaca">
			    <title>Siapa yang sebaiknya membaca</title>
			    <para>
				    Buku ini ditujukan bagi mereka yang ingin menggunakan version control.
				    Pengguna terbesar version control biasanya adalah programmer.
				    Walaupun demikian, version control dapat digunakan untuk mengelola segala macam file,
				    sehingga bisa juga digunakan oleh non-programmer.
		        </para>
		        <para>
		        	Untuk bisa memahami buku ini tidak dibutuhkan pengetahuan khusus
		        	kecuali dasar penggunaan komputer biasa saja.
		        	Pembaca harus mahir membuat folder dan mengedit file teks.
		        </para>
		    </section>

		    <section id="01.01.03.03.tentang.buku.susunan">
			    <title>Bagaimana urutan membacanya</title>
			    <para>
				    Buku ini dibagi menjadi tiga bagian, yaitu:
				    <itemizedlist>
					    <listitem>penggunaan harian</listitem>
					    <listitem>manajemen proyek dan tim</listitem>
					    <listitem>administrasi sistem</listitem>
				    </itemizedlist>
		        </para>
		        <para>
		        	Bagian pertama berisi cara menggunakan Git.
		        	Dengan menguasai bagian pertama ini,
		        	kita sudah bisa bekerja secara produktif baik sendirian maupun dalam tim.
		        	Bukan hanya teknik dasar,
		        	di bagian ini juga dibahas teknik tingkat tinggi seperti branch, merge, rebase, dan lainnya.
		        	Kita juga akan belajar cara penggunaan remote repository di sini.
		        </para>
		        <para>
		        	Jika Anda seorang team leader atau manajer,
		        	Anda perlu mendefinisikan prosedur kerja tim supaya anggota tim Anda bisa bekerja sama dengan efektif.
		        	Di bagian kedua, kita akan melihat bagaimana Git digunakan untuk membuat kerja tim menjadi lebih efektif dan efisien.
		        	Dengan membahas beberapa studi kasus, kita akan memahami bagaimana mendayagunakan Git secara maksimal.
		        </para>
		        <para>
		        	Agar tim kita bisa menggunakan Git tentu kita harus menyediakan infrastrukturnya.
		        	Cara instalasi server, konfigurasi akses kontrol, backup dan restore, semua akan dibahas di bagian ketiga.
		        	Di bagian ini juga dibahas beberapa perangkat pelengkap lain untuk meningkatkan efektifitas dan efisiensi kerja tim.
		        </para>
		        <para>
		        	Sebagian besar isi bagian ketiga membahas tentang instalasi dan konfigurasi server.
		        	Oleh karena itu, pengetahuan mendalam tentang Linux dan jaringan sangat dibutuhkan untuk menguasai bagian ketiga ini.
		        </para>
		    </section>

		    <section id="01.01.03.04.tentang.buku.format">
			    <title>Format penulisan</title>
			    <para>
				    Agar lebih enak dibaca, kita akan membedakan bentuk dan warna tulisan sebagai berikut.

				    Perintah yang kita berikan pada komputer ditulis seperti ini.
			    </para>
			    <para>
				    <userinput>git --version</userinput>
			    </para>
			    <para>
				    Hasil yang ditampilkan komputer ditulis seperti ini.

				    <screen>git version 1.7.4.1</screen>

				    Catatan khusus.
				    Seringkali ada hal penting yang perlu mendapat perhatian khusus. Ini ditulis di menjorok ke tengah seperti contoh berikut.
				    <note>
					    <title>Working Folder Git</title>
					    <para>
						    Working folder Git mengandung repository lengkap mulai dari revisi pertama sampai terbaru.
					    </para>
				    </note>

				    Berikut contoh kode program HTML.

				    <programlisting language="xml"><![CDATA[<html>
    <head>
        <title>Halo Dunia</title
    </head>
    <body>
        <h1>Halo Dunia</h1>
    </body>
</html>]]></programlisting>

				    Dan ini cara penulisan file konfigurasi
				    <screen># Ignore file eclipse
.settings
.metadata
.project
.classpath
bin

# Ignore hasil kompilasi Maven
target</screen>
		        </para>
		    </section>

		    <section id="01.01.03.05.tentang.buku.lisensi">
			    <title>Lisensi</title>
			    <para>
				    Buku ini memiliki lisensi Creative Commons Attribution Share Alike (CC-BY-SA). Artinya, semua orang:
				    <itemizedlist>
					    <listitem>
						    bebas menggunakan buku ini tanpa harus membayar, baik untuk keperluan non-profit maupun komersil. Anda boleh membuka pelatihan berbayar menggunakan buku ini.
					    </listitem>
					    <listitem>
						    bebas membagikan buku ini kepada siapa saja.
					    </listitem>
					    <listitem>
						    bebas membuat perubahan terhadap isi buku ini.
					    </listitem>
				    </itemizedlist>

				    Semua kebebasan di atas hanya memiliki syarat yaitu tetap harus menyebutkan nama pengarang yang aslinya.
				    Ini disebut dengan istilah attribution. Singkatnya, boleh dipakai dan dibagikan asal jangan diakui sebagai karya sendiri.

				    Selain itu, segala perubahan yang dibuat juga harus dilisensikan sama dengan buku ini. Ini disebut dengan istilah Share-Alike.

				    Lebih lanjut tentang lisensi ini bisa dilihat di <ulink url="http://creativecommons.org/licenses/"></ulink>
		        </para>
		    </section>

		    <section id="01.01.03.06.tentang.buku.tools">
			    <title>Tools</title>
			    <para>
				    Buku ini dibuat menggunakan perangkat pembantu :
				    <itemizedlist>
					    <listitem>
					        <ulink url="http://www.docbook.org">Docbook</ulink> :
					        format xml untuk menulis buku
					    </listitem>
					    <listitem>
						    <ulink url="http://maven.apache.org">Maven</ulink> :
						    build tools berbasis Java
					    </listitem>
					    <listitem>
						    <ulink url="http://docbkx.org">Docbkx</ulink> :
						    plugin Maven untuk memproses Docbook
					    </listitem>
				    </itemizedlist>
		        </para>
		    </section>
	    </section>

	    <section id="01.01.04.tentang.kontribusi">
		    <title>Kontribusi</title>
		    <para>
			    Semua orang boleh dan dianjurkan untuk ikut membantu penulisan buku ini.
			    Bagaimana caranya? Gampang. Ada beberapa pekerjaan yang dapat dilakukan.
		    </para>
		    <para>
			    <emphasis>Reviewer</emphasis>
		    </para>
		    <para>
			    Tugasnya adalah memeriksa isi buku dan memberikan koreksi.
			    Apa saja boleh dikoreksi, mulai dari tanda baca, salah ketik,
			    contoh latihan tidak bisa dijalankan, apa saja.
			    Kalau ada penjelasan yang kurang jelas juga boleh dikomentari.
			    Apapun yang bisa membuat buku ini lebih baik.
			    Hasil review dapat dientri di <ulink url="https://github.com/endymuhardin/buku-git/issues">halaman Issue di Github</ulink>.
		    </para>
		    <para>
			    <emphasis>Penulis</emphasis>
		    </para>
		    <para>
			    Bagus sekali kalau Anda ingin menyumbangkan tulisan. Lebih banyak yang mencerdaskan bangsa lebih baik. Begini caranya.
			    Sebagai penulis buku Git, tentu Anda sudah paham cara menggunakan Git,
			    dan juga kemungkinan besar sudah punya account di Github.
			    Langsung saja fork repository buku-git ini dan segeralah berkarya.
			    Begitu dirasa sudah memadai, kirimkan pull request ke saya.
			    Nanti akan saya merge ke repository saya.
		    </para>
	    </section>

    </chapter>

	<chapter id="01.02.install">
	    <title>Instalasi Git</title>

	    <section id="01.02.01.windows">
		    <title>Instalasi Git di Windows</title>
		    <para>
		        Installer Git di Windows dibuatkan oleh MSysGit,
		        yang bisa diunduh di <ulink url="http://code.google.com/p/msysgit/">websitenya</ulink>.
		        Unduhlah file yang nama depannya Git, contohnya seperti ini:
		        Git-1.7.3.1-preview20101002.exe. Ambil saja versi yang terbaru.

                Setelah diunduh, kita bisa langsung jalankan. Berikut panduan
                screen demi screen.

            </para>
            <para>

                Screen pertama adalah welcome.
                <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/msysgit/01-msysgit-install-welcome.png" align="center" />
				    </imageobject>
				    <caption>Welcome to Git Setup Wizard</caption>
			    </mediaobject>

			    Langsung saja klik Next.

		    </para>
		    <para>
		        Di screen berikutnya, kita perlu mengganti opsinya karena berbeda
		        dengan setting standar yang ditawarkan. Berikut posisi opsi yang
		        seharusnya.

		        <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/msysgit/02-msysgit-install-component.png" align="center" />
				    </imageobject>
				    <caption>Windows Explorer Integration</caption>
			    </mediaobject>

		        <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/msysgit/03-msysgit-install-path.png" align="center" />
				    </imageobject>
				    <caption>Path Setting</caption>
			    </mediaobject>

			    Screen terakhir biarkan saja seperti yang disarankan.
			    Ini gunanya untuk mengatasi perbedaan karakter ganti baris
			    di Windows (CRLF) dan Linux (LF saja)

			    <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/msysgit/04-msysgit-install-crlf.png" align="center" />
				    </imageobject>
				    <caption>Line Endings</caption>
			    </mediaobject>

		    </para>

		    <para>
		        Setelah selesai, kita bisa test
		        dengan membuka command prompt
		        dan mengetik perintah
	        </para>
	        <para>
		        <userinput>git</userinput>
            </para>
            <para>
		        Kalau instalasi berjalan lancar,
		        maka akan muncul output dari git sebagai berikut.

		        <screen><![CDATA[usage: git [--version] [--exec-path[=<path>]] [--html-path]
           [-p|--paginate|--no-pager] [--no-replace-objects]
           [--bare] [--git-dir=<path>] [--work-tree=<path>]
           [-c name=value] [--help]
           <command> [<args>]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

See 'git help <command>' for more information on a specific command.]]></screen>

		    </para>
	    </section>

	    <section id="01.02.02.ubuntu">
		    <title>Instalasi Git di Ubuntu</title>
		    <para>
                Untuk instalasi di Ubuntu, kita perlu menginstal paket-paket
                berikut :
                <itemizedlist>
                    <listitem>git-core</listitem>
                    <listitem>gitg</listitem>
                </itemizedlist>

                Kalau menggunakan command prompt, berikut perintahnya

		    </para>

		    <para>
		        <userinput>sudo apt-get install git-core gitg</userinput>
		    </para>

		    <para>
		        Setelah selesai, kita bisa test dengan membuka command prompt dan mengetik perintah <userinput>git</userinput>.

		        Kalau instalasi berjalan lancar, maka akan muncul output dari git sebagai berikut.

		        <screen><![CDATA[usage: git [--version] [--exec-path[=<path>]] [--html-path]
           [-p|--paginate|--no-pager] [--no-replace-objects]
           [--bare] [--git-dir=<path>] [--work-tree=<path>]
           [-c name=value] [--help]
           <command> [<args>]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

See 'git help <command>' for more information on a specific command.]]></screen>

		    </para>
	    </section>

	    <section id="01.02.03.mac">
		    <title>Instalasi Git di Mac</title>
		    <para>
			    TODO
			    </para>
	    </section>

	    <section id="01.02.04.tortoisegit">
		    <title>Instalasi Tortoise Git</title>
		    <para>
		        Tortoise Git adalah antarmuka Git yang terintegrasi dengan
		        Windows Explorer. Dengan menggunakan TortoiseGit, kita bisa
		        menggunakan fitur Git dengan menggunakan klik kanan di Windows
		        Explorer.
		    </para>

		    <para>
		        Install TortoiseGit bisa didapatkan di
		        <ulink url="http://code.google.com/p/tortoisegit/">websitenya</ulink>. Ambil saja versi terbaru.
		        Setelah itu, klik Next beberapa kali hingga selesai.
		        Tidak ada opsi yang diubah, ikuti saja setting yang dianjurkan.
		    </para>

		    <para>
		        <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/tortoisegit/01-tortoisegit-install-welcome.png" align="center" />
				    </imageobject>
				    <caption>Welcome Screen</caption>
			    </mediaobject>

		        <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/tortoisegit/02-tortoisegit-install-sshclient.png" align="center" />
				    </imageobject>
				    <caption>Pilihan SSH Client</caption>
			    </mediaobject>
            </para>
            <para>
                Setelah selesai instalasi, kita bisa langsung menggunakan
                TortoiseGit. Sebaiknya Windowsnya direstart dulu, kalau tidak
                biasanya ada masalah dengan pewarnaan icon.
            </para>
            <para>
                Buka Windows Explorer, di sana ada menu tambahan yang disediakan
                oleh TortoiseGit, salah satunya adalah clone.
			    <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/tortoisegit/03-tortoisegit-use-clone.png" align="center" />
				    </imageobject>
				    <caption>Klik Kanan ada menu Clone</caption>
			    </mediaobject>
                Kalau kita klik clone, kita akan dimintai alamat repository
                yang ingin kita clone.
			    <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/tortoisegit/04-tortoisegit-clone-info.png" align="center" />
				    </imageobject>
				    <caption>Informasi Clone</caption>
			    </mediaobject>
                Pada waktu pertama kali terkoneksi dengan server Git, biasanya
                kita akan ditanyai apakah kita ingin menyimpan SSH key dari
                server tersebut.
			    <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/tortoisegit/05-tortoisegit-clone-save-host-key.png" align="center" />
				    </imageobject>
				    <caption>Save host key, pertama kali connect</caption>
			    </mediaobject>

                Setelah kita lanjutkan dan tidak ada masalah dengan jaringan
                ataupun permission, clone akan selesai dengan baik.
			    <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/tortoisegit/06-tortoisegit-clone-complete.png" align="center" />
				    </imageobject>
				    <caption>Clone selesai</caption>
			    </mediaobject>

                Dengan demikian, TortoiseGit telah terinstal dengan sukses.
                Untuk selanjutnya, operasi Git akan dijelaskan melalui
                command line. Bila command line dipahami, menggunakan TortoiseGit
                juga tidak akan sulit.
		    </para>
	    </section>

    </chapter>

    <chapter id="01.03.basic">
	    <title>Perintah Dasar</title>

	    <section id="01.03.01.setup">
	        <title>Konfigurasi Awal</title>
	        <para>
                Konfigurasi utama yang harus kita lakukan adalah mendaftarkan
                nama dan email kita. Nama dan email ini akan digunakan untuk
                mencatat siapa yang membuat perubahan di repository.
	        </para>

	        <para>
                Konfigurasi username dan email dilakukan melalui perintah
                <command>git config</command> sebagai berikut:
            </para>
            <para>
                <userinput>git config user.name "Endy Muhardin"</userinput>
            </para>
            <para>
                <userinput>git config user.email endy.muhardin@gmail.com</userinput>
            </para>
            <para>
                Hasilnya bisa kita lihat menggunakan perintah <command>git config --list</command>.
                Berikut contohnya:
            </para>
            <para>
                <userinput>git config --list</userinput>
                <screen>
<![CDATA[user.name=Endy Muhardin
user.email=endy.muhardin@gmail.com]]>
                </screen>
	        </para>

            <para>
                Selain username dan email, buat kita yang sering menggunakan
                commandline, perlu juga untuk mengaktifkan pewarnaan.
            </para>
            <para>
                <userinput>git config color.ui true</userinput>
            </para>

            <para>
                Konfigurasi user dan email di atas hanya berlaku di satu
                repository saja. Bila kita membuat repository lain, kita harus
                melakukan konfigurasi tersebut lagi.
                Bila kita menggunakan komputer dengan username pribadi
                (bukan komputer umum seperti di warnet atau di lab komputer)
                kita tentu ingin sekali konfigurasi berlaku untuk semua repository.
                Untuk itu, kita bisa menggunakan opsi <command>--global</command>
                seperti contoh berikut :
            </para>
            <para>
                <userinput>git config --global user.name "Endy Muhardin"</userinput>
            </para>

            <para>
                Bagi pengguna TortoiseGit, konfigurasi dilakukan menggunakan
                klik kanan.

                <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/tortoisegit/07-tortoisegit-setting.png" align="center" />
				    </imageobject>
				    <caption>Settings Menu</caption>
			    </mediaobject>

			    Setelah itu, pilih menu Config di tab kiri.

			    <mediaobject>
				    <imageobject>
					    <imagedata fileref="images/01.02.install/tortoisegit/08-tortoisegit-config.png" align="center" />
				    </imageobject>
				    <caption>Konfigurasi username dan email</caption>
			    </mediaobject>

			    Di sana juga disediakan tombol untuk memberlakukan konfigurasi
			    secara local atau global.
            </para>
	    </section>


	    <section id="01.03.02.create">
		    <title>Membuat repository baru</title>
		    <para>
                Untuk membuat repository, kita jalankan perintah git init di dalam folder kosong.
                <command>git init</command>
                <screen>Initialized empty Git repository in /home/endy/tmp/latihan-git/.git/</screen>

                Dengan demikian, kita telah membuat database
                untuk menyimpan revision di folder tersebut.
                Database ini dikenal dengan istilah repository.
            </para>
            <para>
                Repository git berupa hidden folder bernama .git.
                Karena hidden, mungkin saja tidak terlihat,
                sehingga kita harus memodifikasi opsi
                di Windows Explorer, Nautilus,
                atau aplikasi file manager yang kita gunakan
                agar menampilkan hidden file/folder.
		    </para>
	    </section>

	    <section id="01.03.03.working-staging-repository">
	        <title>Working, Staging, dan Commit</title>
	        <para></para>
	    </section>

        <section id="01.03.04.status">
	        <title>Melihat status working folder</title>
	        <para></para>
	    </section>

	    <section id="01.03.05.add">
	        <title>Memasukkan perubahan ke staging area</title>
	        <para></para>
	    </section>

	    <section id="01.03.06.commit">
	        <title>Menyimpan isi staging area ke commit area</title>
	        <para></para>
	    </section>

	    <section id="01.03.07.log">
	        <title>Melihat history perubahan</title>
	        <para></para>
	    </section>

	    <section id="01.03.08.diff">
	        <title>Membandingkan antar versi</title>
	        <para></para>
	    </section>

	    <section id="01.03.09.checkout">
	        <title>Pergi ke masa lalu</title>
	        <para></para>
	    </section>

    </chapter>

    <chapter id="01.04.branch-merge-rebase">
	    <title>Paralel Development dengan Branch</title>

    </chapter>
	<chapter id="01.05.diff-patch">
	    <title>Diff dan Patch</title>


    </chapter>

    <chapter id="01.06.remote">
	    <title>Remote Repository</title>

    </chapter>

</part>

